// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  firstName    String
  lastName     String
  fullName     String   @db.VarChar(255)
  username     String   @unique
  email        String   @unique
  passwordHash String // Hash'lenmiş parola
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  productComments ProductComment[] // One-to-many ilişkisi, User birden fazla ProductComment içerebilir
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  slug      String   @unique
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product[] // One-to-many ilişkisi, Category birden fazla Product içerebilir
}

model Product {
  id               String          @id @default(uuid())
  categoryId       String
  category         Category        @relation(fields: [categoryId], references: [id])
  name             String
  slug             String          @unique
  shortDescription String          @db.Text
  longDescription  String          @db.Text
  price            Float
  primaryPhotoUrl  String?         // Bu alan uygulamada birincil fotoğrafın URL'si olarak tutulabilir, opsiyonel
  commentCount     Int             @default(0)
  averageRating    Float           @default(0)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  productPhotos    ProductPhoto[]  // One-to-many ilişkisi
  productComments  ProductComment[] // yeni ilişki eklendi

  @@index([categoryId])
}

model ProductPhoto {
  id          String    @id @default(uuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  isPrimary   Boolean   @default(false)
  url         String
  size        Int
  order       Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([productId, order])  // Aynı ürün için order unique olmalı
  @@index([productId])
}

model ProductComment {
  id         String   @id @default(uuid())
  userId     String
  productId  String
  title      String?  // null olabilir
  content    String?  // null olabilir
  rating     Int      // 1-5 arasında değer beklenir
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // İlişkiler
  user       User     @relation(fields: [userId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])

  @@index([productId])
  @@index([userId])
}


